Of course. Here is a single, comprehensive prompt designed to be a "state snapshot" of the entire project. You can provide this to a capable chatbot to resume work, ask for modifications, or get explanations without needing the previous conversation history.

The prompt is structured for machine readability, using clear delimiters and code blocks to define the project's architecture and content.

---
### **PROJECT CONTEXT SNAPSHOT**

**Project Name:** Full-Stack E-commerce CRUD Application
**Tech Stack:**
- **Backend:** Python FastAPI
- **Database:** PostgreSQL (via `postgres:15-alpine` Docker image)
- **ORM/Driver:** SQLAlchemy with `psycopg2-binary`
- **Frontend:** React.js (created with `create-react-app`)
- **Containerization:** Docker & Docker Compose
**Core Functionality:** A complete CRUD (Create, Read, Update, Delete) interface for managing a list of products. The application is fully containerized and the frontend communicates with the backend via a RESTful API. The code has been refactored into modular components.

---
### **PROJECT FILE STRUCTURE**

```
ecommerce-project/
├── docker-compose.yml
├── backend/
│   ├── Dockerfile
│   ├── requirements.txt
│   └── app/
│       ├── __init__.py
│       ├── main.py
│       ├── database.py
│       ├── models.py
│       └── schemas.py
└── frontend/
    ├── Dockerfile
    ├── package.json
    └── src/
        ├── App.css
        ├── App.js
        ├── index.js
        └── components/
            ├── ProductForm.js
            ├── ProductCard.js
            └── EditProductForm.js
```

---
### **ROOT DIRECTORY FILE CONTENT**

--- FILE: `docker-compose.yml` ---
```yaml
version: '3.8'

services:
  # PostgreSQL Database Service
  db:
    image: postgres:15-alpine
    container_name: postgres_db
    restart: always
    environment:
      - POSTGRES_USER=myuser
      - POSTGRES_PASSWORD=mypassword
      - POSTGRES_DB=ecommercedb
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  # FastAPI Backend Service
  backend:
    build: ./backend
    container_name: fastapi_backend
    restart: always
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
    depends_on:
      - db

  # React Frontend Service
  frontend:
    build: ./frontend
    container_name: react_frontend
    restart: always
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    stdin_open: true
    tty: true

volumes:
  postgres_data:
```

---
### **BACKEND FILE CONTENT**

--- FILE: `backend/Dockerfile` ---
```dockerfile
# Use an official Python runtime as a parent image
FROM python:3.11-slim

# Set the working directory in the container
WORKDIR /app

# Copy the dependency file and install dependencies
COPY ./requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy the rest of the application code
COPY . .

# Command to run the application
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]
```

--- FILE: `backend/requirements.txt` ---
```txt
fastapi
uvicorn[standard]
sqlalchemy
psycopg2-binary
```

--- FILE: `backend/app/__init__.py` ---
```python
# This file is intentionally empty.
# It tells Python that 'app' is a package.
```

--- FILE: `backend/app/database.py` ---
```python
from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker

SQLALCHEMY_DATABASE_URL = "postgresql://myuser:mypassword@db/ecommercedb"

engine = create_engine(SQLALCHEMY_DATABASE_URL)

SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

Base = declarative_base()
```

--- FILE: `backend/app/models.py` ---
```python
from sqlalchemy import Column, Integer, String, Float
from .database import Base

class Product(Base):
    __tablename__ = "products"

    id = Column(Integer, primary_key=True, index=True)
    name = Column(String, index=True)
    description = Column(String)
    price = Column(Float)
    inventory = Column(Integer)
```

--- FILE: `backend/app/schemas.py` ---
```python
from pydantic import BaseModel

class ProductBase(BaseModel):
    name: str
    description: str | None = None
    price: float
    inventory: int

class ProductCreate(ProductBase):
    pass

class Product(ProductBase):
    id: int

    class Config:
        orm_mode = True
```

--- FILE: `backend/app/main.py` ---
```python
from fastapi import FastAPI, Depends, HTTPException
from sqlalchemy.orm import Session
from fastapi.middleware.cors import CORSMiddleware

from . import models, schemas
from .database import SessionLocal, engine

models.Base.metadata.create_all(bind=engine)

app = FastAPI()

origins = [
    "http://localhost",
    "http://localhost:3000",
]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

@app.post("/products/", response_model=schemas.Product)
def create_product(product: schemas.ProductCreate, db: Session = Depends(get_db)):
    db_product = models.Product(**product.dict())
    db.add(db_product)
    db.commit()
    db.refresh(db_product)
    return db_product

@app.get("/products/", response_model=list[schemas.Product])
def read_products(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):
    products = db.query(models.Product).offset(skip).limit(limit).all()
    return products

@app.get("/products/{product_id}", response_model=schemas.Product)
def read_product(product_id: int, db: Session = Depends(get_db)):
    db_product = db.query(models.Product).filter(models.Product.id == product_id).first()
    if db_product is None:
        raise HTTPException(status_code=404, detail="Product not found")
    return db_product

@app.put("/products/{product_id}", response_model=schemas.Product)
def update_product(product_id: int, product: schemas.ProductCreate, db: Session = Depends(get_db)):
    db_product = db.query(models.Product).filter(models.Product.id == product_id).first()
    if db_product is None:
        raise HTTPException(status_code=404, detail="Product not found")
    update_data = product.dict(exclude_unset=True)
    for key, value in update_data.items():
        setattr(db_product, key, value)
    db.add(db_product)
    db.commit()
    db.refresh(db_product)
    return db_product

@app.delete("/products/{product_id}")
def delete_product(product_id: int, db: Session = Depends(get_db)):
    db_product = db.query(models.Product).filter(models.Product.id == product_id).first()
    if db_product is None:
        raise HTTPException(status_code=404, detail="Product not found")
    db.delete(db_product)
    db.commit()
    return {"detail": "Product deleted successfully"}
```

---
### **FRONTEND FILE CONTENT**

--- FILE: `frontend/Dockerfile` ---
```dockerfile
# Use an official Node runtime as a parent image
FROM node:18-alpine

# Set the working directory in the container
WORKDIR /app

# Copy package.json and package-lock.json
COPY package*.json ./

# Install dependencies
RUN npm install

# Copy the rest of the application code
COPY . .

# Make port 3000 available to the world outside this container
EXPOSE 3000

# Command to run the app
CMD ["npm", "start"]
```

--- FILE: `frontend/package.json` ---
```json
{
  "name": "frontend",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@testing-library/jest-dom": "^5.17.0",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^13.5.0",
    "axios": "^1.6.0",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-scripts": "5.0.1",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}
```

--- FILE: `frontend/src/index.js` ---
```javascript
import React from 'react';
import ReactDOM from 'react-dom/client';
import './App.css';
import App from './App';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);
```

--- FILE: `frontend/src/App.css` ---
```css
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  background-color: #f4f7f6;
}

.App {
  text-align: center;
}

.App-header {
  background-color: #282c34;
  padding: 20px;
  color: white;
  margin-bottom: 2rem;
}

.product-form {
  margin: 2rem auto;
  padding: 2rem;
  border-radius: 8px;
  max-width: 500px;
  display: flex;
  flex-direction: column;
  gap: 1rem;
  background-color: white;
  box-shadow: 0 4px 8px rgba(0,0,0,0.1);
}

.product-form h3 {
  margin-top: 0;
  text-align: center;
}

.product-form input {
  padding: 0.75rem;
  border: 1px solid #ccc;
  border-radius: 4px;
  font-size: 1rem;
}

.product-form button {
  padding: 0.75rem;
  border: none;
  border-radius: 4px;
  background-color: #28a745;
  color: white;
  font-size: 1rem;
  cursor: pointer;
  transition: background-color 0.2s;
}

.product-form button:hover {
  background-color: #218838;
}

.product-list {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
  gap: 2rem;
  padding: 2rem;
  max-width: 1200px;
  margin: 0 auto;
}

.product-card {
  border: 1px solid #ddd;
  border-radius: 8px;
  padding: 1.5rem;
  box-shadow: 0 4px 8px rgba(0,0,0,0.1);
  background-color: white;
  display: flex;
  flex-direction: column;
  transition: transform 0.2s ease-in-out;
}

.product-card:hover {
  transform: translateY(-5px);
}

.product-card h2 {
  margin-top: 0;
  color: #333;
}

.product-card p {
  color: #666;
  line-height: 1.5;
}

.product-card .price {
  font-weight: bold;
  font-size: 1.25rem;
  color: #007bff;
}

.product-card .inventory {
  font-style: italic;
  color: #555;
  margin-bottom: 1rem;
}

.product-card-actions, .edit-form-actions {
  margin-top: auto;
  padding-top: 1rem;
  display: flex;
  justify-content: flex-end;
  gap: 0.5rem;
}

.product-card-actions button, .edit-form-actions button {
  border: none;
  padding: 0.5rem 1rem;
  border-radius: 4px;
  cursor: pointer;
  color: white;
  transition: background-color 0.2s;
}

.edit-btn, .save-btn { background-color: #007bff; }
.edit-btn:hover, .save-btn:hover { background-color: #0069d9; }

.delete-btn { background-color: #dc3545; }
.delete-btn:hover { background-color: #c82333; }

.cancel-btn { background-color: #6c757d; }
.cancel-btn:hover { background-color: #5a6268; }

.edit-form {
  display: flex;
  flex-direction: column;
  gap: 0.75rem;
}

.edit-form input {
  padding: 0.5rem;
  border: 1px solid #ccc;
  border-radius: 4px;
}
```

--- FILE: `frontend/src/App.js` ---
```javascript
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import ProductForm from './components/ProductForm';
import ProductCard from './components/ProductCard';
import EditProductForm from './components/EditProductForm';
import './App.css';

function App() {
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [editingProductId, setEditingProductId] = useState(null);
  const [editFormData, setEditFormData] = useState({ name: '', description: '', price: '', inventory: '' });

  useEffect(() => {
    const fetchProducts = async () => {
      try {
        const response = await axios.get('http://localhost:8000/products/');
        setProducts(response.data);
      } catch (error) {
        console.error("There was an error fetching the products:", error);
      } finally {
        setLoading(false);
      }
    };
    fetchProducts();
  }, []);

  const handleProductCreated = (newProduct) => {
    setProducts([...products, newProduct]);
  };

  const handleProductDeleted = async (productId) => {
    try {
      await axios.delete(`http://localhost:8000/products/${productId}`);
      setProducts(products.filter(product => product.id !== productId));
    } catch (error) {
      console.error("Error deleting product:", error);
    }
  };

  const handleEditClick = (product) => {
    setEditingProductId(product.id);
    setEditFormData({ ...product });
  };

  const handleEditFormChange = (e) => {
    const { name, value } = e.target;
    setEditFormData(prevData => ({ ...prevData, [name]: value }));
  };

  const handleCancelEdit = () => {
    setEditingProductId(null);
  };

  const handleUpdateSubmit = async (e) => {
    e.preventDefault();
    const productId = editingProductId;
    const updatedProductData = {
      name: editFormData.name,
      description: editFormData.description,
      price: parseFloat(editFormData.price),
      inventory: parseInt(editFormData.inventory, 10),
    };

    try {
      const response = await axios.put(`http://localhost:8000/products/${productId}`, updatedProductData);
      setProducts(products.map(p => (p.id === productId ? response.data : p)));
      setEditingProductId(null);
    } catch (error) {
      console.error("Error updating product:", error);
    }
  };
  
  return (
    <div className="App">
      <header className="App-header">
        <h1>Product Catalog</h1>
      </header>
      
      <ProductForm onProductCreated={handleProductCreated} />

      <div className="product-list">
        {loading ? (
          <p>Loading products...</p>
        ) : (
          products.map(product => (
            <div key={product.id} className="product-card">
              {editingProductId === product.id ? (
                <EditProductForm 
                  productData={editFormData}
                  onFormChange={handleEditFormChange}
                  onUpdate={handleUpdateSubmit}
                  onCancel={handleCancelEdit}
                />
              ) : (
                <ProductCard 
                  product={product}
                  onEdit={handleEditClick}
                  onDelete={handleProductDeleted}
                />
              )}
            </div>
          ))
        )}
      </div>
    </div>
  );
}

export default App;
```

--- FILE: `frontend/src/components/ProductForm.js` ---
```javascript
import React, { useState } from 'react';
import axios from 'axios';

function ProductForm({ onProductCreated }) {
  const [name, setName] = useState('');
  const [description, setDescription] = useState('');
  const [price, setPrice] = useState('');
  const [inventory, setInventory] = useState('');

  const handleSubmit = async (e) => {
    e.preventDefault();
    const newProduct = {
      name: name,
      description: description,
      price: parseFloat(price),
      inventory: parseInt(inventory, 10),
    };

    try {
      const response = await axios.post('http://localhost:8000/products/', newProduct);
      onProductCreated(response.data);
      setName('');
      setDescription('');
      setPrice('');
      setInventory('');
    } catch (error) {
      console.error("Error creating product:", error);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="product-form">
      <h3>Add a New Product</h3>
      <input type="text" value={name} onChange={(e) => setName(e.target.value)} placeholder="Product Name" required />
      <input type="text" value={description} onChange={(e) => setDescription(e.target.value)} placeholder="Product Description" />
      <input type="number" value={price} onChange={(e) => setPrice(e.target.value)} placeholder="Price" required step="0.01" />
      <input type="number" value={inventory} onChange={(e) => setInventory(e.target.value)} placeholder="Inventory" required step="1" />
      <button type="submit">Add Product</button>
    </form>
  );
}

export default ProductForm;
```

--- FILE: `frontend/src/components/ProductCard.js` ---
```javascript
import React from 'react';

function ProductCard({ product, onEdit, onDelete }) {
  return (
    <>
      <h2>{product.name}</h2>
      <p>{product.description || 'No description available.'}</p>
      <p className="price">Price: ${product.price.toFixed(2)}</p>
      <p className="inventory">In Stock: {product.inventory}</p>
      <div className="product-card-actions">
        <button className="edit-btn" onClick={() => onEdit(product)}>Edit</button>
        <button className="delete-btn" onClick={() => onDelete(product.id)}>Delete</button>
      </div>
    </>
  );
}

export default ProductCard;
```

--- FILE: `frontend/src/components/EditProductForm.js` ---
```javascript
import React from 'react';

function EditProductForm({ productData, onFormChange, onUpdate, onCancel }) {
  return (
    <form onSubmit={onUpdate} className="edit-form">
      <input type="text" name="name" value={productData.name} onChange={onFormChange} required />
      <input type="text" name="description" value={productData.description} onChange={onFormChange} />
      <input type="number" name="price" value={productData.price} onChange={onFormChange} required step="0.01" />
      <input type="number" name="inventory" value={productData.inventory} onChange={onFormChange} required step="1" />
      <div className="edit-form-actions">
        <button type="submit" className="save-btn">Save</button>
        <button type="button" onClick={onCancel} className="cancel-btn">Cancel</button>
      </div>
    </form>
  );
}

export default EditProductForm;
```

---
### **EXECUTION INSTRUCTIONS**

1. Ensure Docker is running.
2. From the root `ecommerce-project` directory, run the command: `docker-compose up --build`.
3. Access the frontend at `http://localhost:3000`.
4. Access the backend API documentation at `http://localhost:8000/docs`.

---
### **END OF CONTEXT**